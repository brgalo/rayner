#version 460
#extension GL_GOOGLE_include_directive : require
#include "commonrt.glsl"
#include "random.glsl"

struct pushConsts {
    uint64_t vertsBufferAddress;
    uint64_t idxBufferAddress;
    uint64_t outBufferAddress;
    uint64_t oriBufferAddress;
    uint64_t dirBufferAddress;
    uint64_t hitBufferAddress;
    uint64_t energyBufferAddress;
    uint64_t currentTri;
};

struct hitInfo {
    uint64_t tri;
    float energy;
};

layout(push_constant) uniform _pushConsts { pushConsts consts;};


layout(buffer_reference, scalar) buffer OriBuffer{vec4 oris[];};
layout(buffer_reference, scalar) buffer DirBuffer{vec4 dirs[];};
layout(buffer_reference, scalar) buffer VertBuffer{vec4 verts[];};
layout(buffer_reference, scalar) buffer IndexBuffer{uint idxs[];};
layout(buffer_reference, scalar) buffer HitBuffer{hitInfo hits[];};


layout(location = 0) rayPayloadEXT RayPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT scene;

void main() {

    // setting up constants and buffer references for the shader
    uint tri = uint(consts.currentTri);
    uint seed = tea(gl_LaunchIDEXT.x, 0);

    OriBuffer oribuf = OriBuffer(consts.oriBufferAddress);
    DirBuffer dirbuf = DirBuffer(consts.dirBufferAddress);
    VertBuffer vertbuf = VertBuffer(consts.vertsBufferAddress);
    IndexBuffer idxbuf = IndexBuffer(consts.idxBufferAddress);
    HitBuffer hitbuf = HitBuffer(consts.hitBufferAddress);

    uvec3 idx = uvec3(idxbuf.idxs[tri*3 + 0],
                      idxbuf.idxs[tri*3 + 1],
                      idxbuf.idxs[tri*3 + 2]);

    // random vals for random sampling
    float sr1 = sqrt(rnd(seed));
    float r2 = rnd(seed);
    float rayEnergy = rnd(seed);
    float phi =  acos(rayEnergy);
    float teta = rnd(seed)*radians(360);

    // retrieve geom data
    vec4 A,B,C,ori,hit;

    A = vertbuf.verts[idx.x];
    B = vertbuf.verts[idx.y];
    C = vertbuf.verts[idx.z];
    ori = A*(1-sr1) + B*sr1*(1-r2) + C*sr1*r2;

    vec3 normal,base_1,base_2,dir;
    // compute normal
    base_1 = normalize(A.xyz-B.xyz);
    normal = normalize(cross(base_1,C.xyz-B.xyz));
    base_2 = normalize(cross(base_1,normal));

    // compute dir
    dir = sin(phi)*(sin(teta)*base_2 + cos(teta)*base_1) + cos(phi)*normal;

    // offset ori, to avoid self intersections
    ori.xyz = offsetRay(ori.xyz, normal);
    oribuf.oris[gl_LaunchIDEXT.x] = ori;

    traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, ori.xyz ,0,dir,1000,0);

    if (payload.hitIdx != -1) {
    hit = (1-payload.uv.x-payload.uv.y)*vertbuf.verts[idxbuf.idxs[payload.hitIdx*3 + 0]] + 
                            payload.uv.x*vertbuf.verts[idxbuf.idxs[payload.hitIdx*3 + 1]] + 
                            payload.uv.y*vertbuf.verts[idxbuf.idxs[payload.hitIdx*3 + 2]];
    // store hit to hitbuffer
    hitbuf.hits[gl_LaunchIDEXT.x] = hitInfo(payload.hitIdx, hit.w);
    
    hit.w = 10;

    }
    else {
    hit = ori + vec4(dir*0.1,0);
    // store max val as hit
    hitbuf.hits[gl_LaunchIDEXT.x] = hitInfo(0xffffffff, hit.w);
    hit.w = 5;
    }

    dirbuf.dirs[gl_LaunchIDEXT.x] = hit;

}